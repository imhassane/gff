# import Post from './post.graphql'
# import User from 'user.graphql'
# import Tag from 'tag.graphql'
# import Category from 'category.graphql'
# import Picture from 'picture.graphql'
# import Documentary from 'documentary.graphql'
# import Comment from 'comment.graphql'
# import Contact from 'contact.graphql'
# import NewsLetter from 'newsletter.graphql'
# import Reader from 'reader.graphql'
# import Search from 'search.graphql'
# import Page from 'page.graphql'
# import Notification from 'notification.graphql'
# import Auth from 'auth.graphql'

scalar DateTime

type Query {
    posts: [Post!]
    getPosts(limit: Int!): [Post!]
    post(_id: ID!): Post!

    pages: [Page!]
    page(_id: ID, rank: Int): Page!

    tags: [Tag!]
    tag(_id: ID!): Tag!

    categories: [Category!]
    category(_id: ID!): Category!

    users: [User!]
    me: User!
    user(_id: ID!): User!

    pictures(type: String!): [Picture]!
    picture(_id: ID!): Picture!

    documentaries(TYPE: String!): [Documentary]!
    documentary(_id: ID!): Documentary!

    allComments: [Comment!]
    comments(post: ID!): [Comment!]
    comment(_id: ID!): Comment!

    readers: [Reader!]
    reader(_id: ID, email: String): Reader!

    contacts: [Contact!]
    contact(_id: ID!): Contact!

    newsletters: [NewsLetter!]
    newsletter(_id: ID!): NewsLetter!

    search(text: String!): Search!

    notifications: [Notification!]
    notification(_id: ID, post: ID, contact: ID): Notification
}

type Mutation {
    createUser(username: String!, email: String!, password: String!): User
    updateUser(_id: ID!, picture: String!, is_active: Boolean, permissions:[String!]): User
    updatePassword(oldPassword: String!, password: String!): User!
    deleteUser(_id: ID!): User

    authenticate(email: String!, password: String!): Auth!

    createCategory(name: String!, description: String!): Category
    updateCategory(_id: ID!, name: String!, description: String!): Category
    deleteCategory(_id: ID!): Category

    createTag(name: String!): Tag
    updateTag(_id: ID!, name: String!): Tag
    deleteTag(_id: ID!): Tag

    createPicture(type: String!, path: String!): Picture
    updatePicture(_id: ID!, path: String!): Picture
    updateUserPicture(_id: ID!): User
    deletePicture(_id: ID!): Picture

    createPost(title: String!, content: String!, extract: String!, tags: [String!], categories: [String!], active: Boolean, draft: Boolean, picture: ID!): Post
    updatePost(_id: ID!, title: String, content: String, tags: [String!], categories: [String!], active: Boolean, draft: Boolean, picture: ID): Post
    deletePost(_id: ID!): Post

    createPage(title: String!, description: String!, type: String!, content: String): Page!
    updatePage(_id: ID!, title: String, description: String, content: String, rank: Int): Page!
    deletePage(_id: ID!): Page!

    createDocumentary(title: String!, description: String!, content: String!, url: String!, TYPE: String!, picture: ID!): Documentary
    updateDocumentary(_id: ID!, title: String, content: String, url: String, picture: ID, description: String!): Documentary
    deleteDocumentary(_id: ID!): Documentary

    createComment(username: String!, email: String!, content: String!, comment: ID, post: ID!): Comment
    updateComment(_id: ID!, valid: Boolean!): Comment
    deleteComment(_id: ID!): Comment!

    createContact(username: String, website: String, email: String!, object: String!, message: String!): Contact
    updateContact(_id: ID!, validated: Boolean!): Contact
    deleteContact(_id: ID!): Contact

    createReader(email: String!): Reader,
    updateReader(_id: ID!, unsuscribed: Boolean!): Reader
    deleteReader(_id: ID!): Reader

    createNewsLetter(title: String!, content: String!): NewsLetter,
    updateNewsLetter(_id: ID!, title: String, content: String): NewsLetter,
    deleteNewsLetter(_id: ID!): NewsLetter
    publishNewsLetter(_id: ID!): NewsLetter

    createNotification(title: String!, message: String!, type: String!, post: ID, contact: ID): Notification
    updateNotification(_id: ID!, seen: Boolean, message: String): Notification
    deleteNotification(_id: ID!): Notification
}